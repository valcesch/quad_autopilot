#include "gAtt.h"

#include <float.h>
#include <math.h>

#define GATT_COMPL_FILTER_WEIGHT_GYRO	0.99f
#define GATT_COMPL_FILTER_WEIGHT_TRIAD	0.01f
#define GATT_ACC_G_TRESHOLD_HIGH		11.5f
#define GATT_ACC_G_TRESHOLD_LOW			7.5f
#define GATT_LP_TABLE_SIZE				3
#define GATT_LP_TABLE_SIZE_INV			0.33

#define DEG_TO_RAD				0.017453292f
#define DEG_TO_RAD_DIV_2		0.008726646f
#define M_PI_DIV_2				1.5707963267948966192313216916398f

typedef struct {

	float x;
	float y;
	float z;
	float w;

} GATT_Quat;

float GATT_normVector(float in[3]);
void GATT_getEulerRateFromGyro(float eul_d[3], float G[3], float eul[3]);

void GATT_getAtt(float G[3], float A[3], float E[3], float dt){

	float Eul_g[3] = {0, 0, 0}, Eul_a[3] = {0, 0, 0};
	static float Eul[3] = {0,0,0};
	int accelVectorIsValid = 0;
	static int firstItter = 1;

//	long A_i[3] = {0, 0, 0};	//Meilleur ? _> simplifier*10
//	GATT_acc_x_angle_LP((long)(A_tmp[0] * 10) , &A_i[0]);
//	GATT_acc_y_angle_LP((long)(A_tmp[1] * 10) , &A_i[1]);
//	GATT_acc_z_angle_LP((long)(A_tmp[2] * 10) , &A_i[2]);
//
//	float A[3] = {0, 0, 0};
//	A[0] = A_i[0];
//	A[1] = A_i[1];
//	A[2] = A_i[2];

	//Accelerometer vector computation:
	float A_norm = GATT_normVector(A);
//	if((A_norm > GATT_ACC_G_TRESHOLD_HIGH) || (A_norm < GATT_ACC_G_TRESHOLD_LOW)){
//		accelVectorIsValid = 0;
//	}
//	else{
		//Compute Euler angles:
		Eul_a[YAW] 		= 0.0f;
		Eul_a[PITCH] 	= -atan2f(-A[0], sqrtf(A[1] * A[1] + A[2] * A[2]));
		Eul_a[ROLL] 	= atanf(A[1]/ A[2]);

		accelVectorIsValid = 1;	//Careful -> when angle close of singularity should switch to gyroscope measurement
//	}

	if(firstItter == 1){
		firstItter = 0;
		Eul[YAW] 		= 1.0;
		Eul[PITCH] 		= 1.0;
		Eul[ROLL] 		= 1.0;
	}
	else{
		float G_rad[3] = {0};
		G_rad[0] = G[0] * DEG_TO_RAD;
		G_rad[1] = G[1] * DEG_TO_RAD;
		G_rad[2] = G[2] * DEG_TO_RAD;

		float eul_d[3] = {0, 0, 0};

		GATT_getEulerRateFromGyro(eul_d, G_rad, Eul);

		Eul_g[YAW] 		= Eul[YAW] 		+ eul_d[YAW] * dt;
		Eul_g[PITCH] 	= Eul[PITCH] 	+ eul_d[PITCH] * dt;
		Eul_g[ROLL] 	= Eul[ROLL] 	+ eul_d[ROLL] * dt;
	}

	if(accelVectorIsValid == 0){
		Eul[YAW] 		= Eul_g[YAW];
		Eul[PITCH] 		= Eul_g[PITCH];
		Eul[ROLL] 		= Eul_g[ROLL];
	}
	else if(accelVectorIsValid == 1){
		Eul[YAW] 		= Eul_g[YAW];
		Eul[PITCH]		= (float)GATT_COMPL_FILTER_WEIGHT_GYRO * Eul_g[PITCH];
		Eul[PITCH]		+= (float)GATT_COMPL_FILTER_WEIGHT_TRIAD * Eul_a[PITCH];
		Eul[ROLL] 		= (float)GATT_COMPL_FILTER_WEIGHT_GYRO * Eul_g[ROLL];
		Eul[ROLL] 		+= (float)GATT_COMPL_FILTER_WEIGHT_TRIAD * Eul_a[ROLL];
	}

	E[0] = Eul[0];
	E[1] = Eul[1];
	E[2] = Eul[2];
}

void GATT_getEulerRateFromGyro(float eul_d[3], float G[3], float eul[3]){

	float sinf_roll  = sinf(eul[ROLL]);
	float cosf_roll  = cosf(eul[ROLL]);
	float cosf_pitch = cosf(eul[PITCH]);
	float tanf_pitch = tanf(eul[PITCH]);

	if(cosf_pitch > 0.000001){	//Condition to avoid locking
		eul_d[ROLL]		= G[0] + G[1] * sinf_roll * tanf_pitch + G[2] * sinf_roll * tanf_pitch;
		eul_d[PITCH]    = -(- G[1] * cosf_roll - G[2] * sinf_roll);
		eul_d[YAW]      = (G[1] * sinf_roll / cosf_pitch + G[2] * cosf_roll / cosf_pitch);
	}
	else{
		eul_d[YAW] 		= 0.001;
		eul_d[PITCH] 	= 0.001;
		eul_d[ROLL] 	= 0.001;
		eul[YAW] 		= 0.0;
		eul[PITCH] 		= 0.0;
		eul[ROLL] 		= 0.0;
	}
}

float GATT_normVector(float in[3]){

	return sqrtf(in[0] * in[0] + in[1] * in[1] + in[2] * in[2]);
}

void GATT_gyro_x_angle_LP(float in , float *out) {

	long mem_mean = 0;
	static long mem[GATT_LP_TABLE_SIZE] = {0};

	int i;
	for (i = 0; i < GATT_LP_TABLE_SIZE - 1; i++) {
		mem[i] = mem[i + 1];
	}
	mem[GATT_LP_TABLE_SIZE - 1] = (long)(in * 10.0);

	for (i = 0; i < GATT_LP_TABLE_SIZE; i++) {
		mem_mean += mem[i];
	}
	mem_mean *= GATT_LP_TABLE_SIZE_INV;

	*out = (float)(mem_mean) * 0.1;
}

void GATT_gyro_y_angle_LP(float in , float *out) {

	long mem_mean = 0;
	static long mem[GATT_LP_TABLE_SIZE] = {0};

	int i;
	for (i = 0; i < GATT_LP_TABLE_SIZE - 1; i++) {
		mem[i] = mem[i + 1];
	}
	mem[GATT_LP_TABLE_SIZE - 1] = (long)(in * 10.0);

	for (i = 0; i < GATT_LP_TABLE_SIZE; i++) {
		mem_mean += mem[i];
	}
	mem_mean *= GATT_LP_TABLE_SIZE_INV;

	*out = (float)(mem_mean) * 0.1;
}

void GATT_gyro_z_angle_LP(float in , float *out) {

	long mem_mean = 0;
	static long mem[GATT_LP_TABLE_SIZE] = {0};

	int i;
	for (i = 0; i < GATT_LP_TABLE_SIZE - 1; i++) {
		mem[i] = mem[i + 1];
	}
	mem[GATT_LP_TABLE_SIZE - 1] = (long)(in * 10.0);

	for (i = 0; i < GATT_LP_TABLE_SIZE; i++) {
		mem_mean += mem[i];
	}
	mem_mean *= GATT_LP_TABLE_SIZE_INV;

	*out = (float)(mem_mean) * 0.1;
}

void GATT_x_angle_LP(float in , float *out) {

	long mem_mean = 0;
	static long mem[GATT_LP_TABLE_SIZE] = {0};

	int i;
	for (i = 0; i < GATT_LP_TABLE_SIZE - 1; i++) {
		mem[i] = mem[i + 1];
	}
	mem[GATT_LP_TABLE_SIZE - 1] = (long)(in * 100.0);

	for (i = 0; i < GATT_LP_TABLE_SIZE; i++) {
		mem_mean += mem[i];
	}
	mem_mean *= GATT_LP_TABLE_SIZE_INV;

	*out = (float)(mem_mean) * 0.01;
}

void GATT_y_angle_LP(float in , float *out) {

	long mem_mean = 0;
	static long mem[GATT_LP_TABLE_SIZE] = {0};

	int i;
	for (i = 0; i < GATT_LP_TABLE_SIZE - 1; i++) {
		mem[i] = mem[i + 1];
	}
	mem[GATT_LP_TABLE_SIZE - 1] = (long)(in * 100.0);

	for (i = 0; i < GATT_LP_TABLE_SIZE; i++) {
		mem_mean += mem[i];
	}
	mem_mean *= GATT_LP_TABLE_SIZE_INV;

	*out = (float)(mem_mean) * 0.01;
}

void GATT_z_angle_LP(float in , float *out) {

	long mem_mean = 0;
	static long mem[GATT_LP_TABLE_SIZE] = {0};

	int i;
	for (i = 0; i < GATT_LP_TABLE_SIZE - 1; i++) {
		mem[i] = mem[i + 1];
	}
	mem[GATT_LP_TABLE_SIZE - 1] = (long)(in * 100.0);

	for (i = 0; i < GATT_LP_TABLE_SIZE; i++) {
		mem_mean += mem[i];
	}
	mem_mean *= GATT_LP_TABLE_SIZE_INV;

	*out = (float)(mem_mean) * 0.01;
}
